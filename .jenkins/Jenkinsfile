pipeline {
    agent { label 'sds-builder-2204' }

    environment {
        ARTIFACTORY_PASS = credentials('ARTIFACTORY_PASS')
        CONAN_USER = 'oss'
        TARGET_BRANCH = 'main'
        STABLE_BRANCH = 'stable/v*'
        built_chain = ''
        failed_pkg = ''
    }

    parameters {
        string(defaultValue: "", description: 'UpstreamTriggered', name: 'upstream_triggered')
    }

    stages {
        stage('Adjust Tag for Master/PR') {
            when { not {
                branch "${STABLE_BRANCH}"
            } }
            steps {
                script {
                    sh(script: "sed -Ei 's, version = .*\"([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+).*, version = \"\\1-${env.BUILD_NUMBER}\",' conanfile.py")
                    BUILD_MISSING = "--build missing"
                }
            }
        }
        stage('Adjust for Testing/Stable') {
            when {
                branch "${STABLE_BRANCH}"
            }
            steps {
                script {
                    BUILD_MISSING = ""
                }
            }
        }

        stage('Get Version') {
            steps {
                script {
                    PROJECT = sh(script: "grep -m 1 'name =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    VER = sh(script: "grep -m 1 ' version =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    CONAN_CHANNEL = sh(script: "echo ${BRANCH_NAME} | sed -E 's,(\\w+-?\\d*)/.*,\\1,' | sed -E 's,-,_,' | tr -d '\n'", returnStdout: true)
                    TAG = "${VER}@${CONAN_USER}/${CONAN_CHANNEL}"
                    slackSend color: '#0063D1', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* is building."
                }
            }
        }

        stage('Tag Stable Build') {
            when { branch "${STABLE_BRANCH}" }
            steps {
                script {
                    TAG = "${VER}@"
                }
            }
        }

        stage("Compile") {
            steps {
                sh """conan create ${BUILD_MISSING} -o ${PROJECT}:sanitize=True -pr debug . ${PROJECT}/${TAG} ;
                      conan create ${BUILD_MISSING} -pr debug . ${PROJECT}/${TAG} ;
                      conan create ${BUILD_MISSING} -pr test -o sisl:malloc_impl=tcmalloc . ${PROJECT}/${TAG} ;"""
            }
        }

        stage("Deploy") {
            when {
                expression { !(env.BRANCH_NAME =~ /PR-/) }
            }
            steps {
                sh "conan user -r ebay-local -p ${ARTIFACTORY_PASS} _service_sds"
                sh "conan upload ${PROJECT}/${TAG} -c --all -r ebay-local"
            }
        }
        stage("Downstream Build") {
            when { allOf {
               expression { (env.BRANCH_NAME == "${TARGET_BRANCH}") }
               expression { (!"${upstream_triggered}") || ("${upstream_triggered}" == "") }
            } }
        
            stages {
                stage('StorageManager') {
                    steps {
                        script {
                            def hobj_res = build job: "StorageManager/main", parameters: [[$class: 'StringParameterValue', name: 'upstream_triggered', value: 'true']], propagate: true
                            built_chain = "${built_chain}" + ", " + "$hobj_res.buildVariables.pkg_version"
                        }
                    }
                    post {
                        failure { script { failed_pkg = "StorageManager" } }
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                if ("${failed_pkg}" != "") {
                    slackSend color: '#E43237', channel: '#sds-ci', message: "@here HomeObject downstream pkg - *${failed_pkg}* build failed.\n*URL:* ${BUILD_URL}\nIf result not expected, revert (aka `conan remove -r ebay-local`) these pkgs: ```${built_chain}```"
                } else {
                    slackSend color: '#E43237', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has had a failure : ${BUILD_URL}"
                }
            }
        }
        success {
            slackSend color: '#85B717', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has completed."
        }
    }
}
